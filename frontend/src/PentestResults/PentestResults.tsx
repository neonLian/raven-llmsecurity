import { Container, Text, Stack, Divider } from '@mantine/core';
import { PentestSingleResult } from '../PentestSingleResult/PentestSingleResult';
import type { TestResult } from '../utility/testResult.tsx';

interface PentestResultsProps {
  isVisible: boolean;
  testResults: TestResult[] | undefined;
}

export const PentestResults = ({ isVisible, testResults }: PentestResultsProps) => {

  const containerStyle = {
    opacity: isVisible ? 1 : 0,
    pointerEvents: isVisible ? 'auto' : 'none'
  } as React.CSSProperties;


  const failedTests = testResults?.filter(result => !result.testPassed);
  const allTestsPassed = failedTests?.length === 0;

  console.log(isVisible);
  console.log(testResults);

  return (
    <Container size="md" m="50px auto" style={containerStyle}>
      <Stack gap="lg">
        <Divider size="sm" mt="50px" mb="20px" />

        {!(isVisible && testResults) && (
          <Text>An error occurred when running tests.</Text>
        )}
        
        {(
          <>
            <Text size="1.8rem" ta="center" m="20px auto" c={allTestsPassed ? 'green' : '#c41906'}>
              {allTestsPassed ? 'All security tests passed.' : 'One or more security tests failed.'}
            </Text>
            
            <Stack gap="md">
              {testResults?.map((result, index) => (
                <PentestSingleResult
                  key={index}
                  testPassed={result.testPassed}
                  testName={result.testName}
                  adversarialPrompt={result.adversarialPrompt}
                  targetResponse={result.targetResponse}
                />
              ))}
            </Stack>
          </>
        )}
      </Stack>
    </Container>
  );
};

export default PentestResults;
